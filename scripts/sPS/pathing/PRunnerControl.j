///////////////////////////////////////////////////////////////////////////// This structure represents a control for runner on a path// A PRunner, follows a PEdge, and use PNode at PEdge-goals//// To convert a unit to a PRunner we use an ObjectiveUnitPool//// USES://   - General library//   - PNode//   - PEdge//   - PConfig//   - PRunner//// USED BY://   - PNode/////////////////////////////////////////////////////////////////////////////struct PRunnerControl  private static boolean initialized = false    public static ObjectiveUnitPool pool    //! runtextmacro EnforceStatic("PRunnerControl")  public static method init takes PGraph graph returns nothing    if (PRunnerControl.initialized == true) then      call showMessage("Map Error: attempted to initialize PSimpleRunner structure twice.")      return    endif    set PRunnerControl.initialized = true      // register for pathing events    call graph.registerForPathing(function PRunnerControl.catchPathing)        // a time interval, whenever this interval-time is gone    // reorder the runner    // NOTE: only for testcases, this lags like hell.    if(PConfig_USE_RUNNER_REORDER_TICK) then      call Events.registerForNewTicker(PConfig_RUNNER_REORDER_TICK, function PRunnerControl.catchReorderTick)    endif        // set the pool for our events    set PRunnerControl.pool = ObjectiveUnitPool.create()  endmethod    public static method fromUnit takes unit u returns PRunner    return PRunner(PRunnerControl.pool.get(u))  endmethod    private static method updatePathing takes PRunner r returns nothing    local PObjective o = r.getPObjective()        if (o.edge == nill) then      call showMessage("Critical Map Error: no edge for pathing [PRunnerControl.updatePathing]")      return    endif           if(o.edge.containsUnit(o.egdeOffset, r.getUnit())) then      if(o.edge.isGoal(o.egdeOffset)) then        call o.edge.goal.handelRunner(r)      else        set o.egdeOffset = o.egdeOffset + 1        call r.updatedPObjective()      endif    endif  endmethod  //=====================================  //=== MUTATORS ========================  //=====================================  public static method setEdgeObjective takes PRunner r, PEdge edge, integer edgeOffset returns nothing    // make sure the runner is in our pool    if(not(PRunnerControl.pool.contains(r))) then      call showMessage("Critical Map Error: the runner has to be in our pool [PRunnerControl.setEdgeObjective]")      return    endif       call r.setPObjective(PObjective.createEdgeObjectiv(edge, edgeOffset))  endmethod    public static method setNodeObjective takes PRunner r, PNode node returns nothing    call node.handelRunner(r)  endmethod    //=====================================  //=== EVENTS ==========================  //=====================================  //////////  private static method catchPathing takes nothing returns nothing    local PRunner r        set r = PRunnerControl.fromUnit(GetTriggerUnit())        if r == nill then      return    endif        call PRunnerControl.updatePathing(r)  endmethod    // reorder the runner  // NOTE: only for testcases, this lags like hell.  private static method catchReorderTick takes nothing returns nothing    local integer i = 1      loop      exitwhen i >= PRunnerControl.pool.size()            call PRunner(PRunnerControl.pool.fromIndex(i)).updatedPObjective()      set i = i + 1    endloop  endmethodendstruct