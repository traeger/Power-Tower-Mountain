struct PGraphToolkit  private PGraph graph    private integer lightning_count = 0  private lightning array lightnings[PConfig_DRAW_MAX_LIGHTNINGS]  //! runtextmacro EnforcePermanent("PRunnerControl")  public static method create takes PGraph graph returns PGraphToolkit    local PGraphToolkit h        //try to allocate    set h = PGraphToolkit.allocate()    if (h == nill) then      call showMessage("Critical Map Error: couldn't allocate a PGraphToolkit.")      return nill    endif        set h.graph = graph        return h  endmethod    //=====================================  //===       ===========================  //=====================================    // make all nodes invisible  // nodes are loctust-like now  public method hideNodes takes nothing returns nothing    local integer i = 0    loop      exitwhen i >= this.graph.getNodeCount()      call UnitAddAbility(this.graph.getNode(i).nodeIndicator, 'Aloc')      set i = i + 1    endloop  endmethod    //=====================================  //=== DRAW ============================  //=====================================  //////////    // draw a edge  public method drawEdge takes PEdge edge returns nothing    local location loc1 = null    local location loc2 = null    local integer i = 1      if(this.lightning_count + edge.size() >= PConfig_DRAW_MAX_LIGHTNINGS) then      call showMessage("Critical Map Error: lightning-drawcount out of bounds [PGraphToolkit.drawEdge]")      return    endif      set loc2 = GetRectCenter(edge.getInnerPathingRect(0))    loop      exitwhen i >= edge.size()      if(not(loc1 == null)) then        call RemoveLocation(loc1)      endif            set loc1 = loc2      set loc2 = GetRectCenter(edge.getInnerPathingRect(i))      set this.lightnings[this.lightning_count] = AddLightningLoc("DRAB", loc2, loc1) //drain life lightning      set this.lightning_count = this.lightning_count + 1            set i = i + 1    endloop        call RemoveLocation(loc1)    call RemoveLocation(loc2)    set loc1 = null    set loc2 = null  endmethod    private method drawRect takes rect r returns nothing    local real minx = GetRectMinX(r)    local real maxx = GetRectMaxX(r)    local real miny = GetRectMinY(r)    local real maxy = GetRectMaxY(r)        if(this.lightning_count + 4 >= PConfig_DRAW_MAX_LIGHTNINGS) then      call showMessage("Critical Map Error: lightning-drawcount out of bounds [PGraphToolkit.drawRect]")      return    endif         //use tangle lightning    set this.lightnings[this.lightning_count + 0] = AddLightning("LEAS" ,false, minx, miny, minx, maxy)    set this.lightnings[this.lightning_count + 1] = AddLightning("LEAS" ,false, minx, maxy, maxx, maxy)    set this.lightnings[this.lightning_count + 2] = AddLightning("LEAS" ,false, maxx, maxy, maxx, miny)    set this.lightnings[this.lightning_count + 3] = AddLightning("LEAS" ,false, maxx, miny, minx, miny)    set this.lightning_count = this.lightning_count + 4  endmethod    // draw the edge rects (without start and end)  private method drawPathingOuterRect takes PEdge edge returns nothing    local integer i = 1        loop      exitwhen i >= (edge.size() - 1)      call this.drawRect(edge.getInnerPathingRect(i))      call this.drawRect(edge.getOuterPathingRect(i))            set i = i + 1    endloop  endmethod    // draw all the pathing-rects.  public method drawAllPathingRects takes nothing returns nothing    local integer i = 0    local integer j = 0    local PNode node    loop      exitwhen i >= this.graph.getNodeCount()      set node = this.graph.getNode(i)      set j = 0            // draw the node rect      call this.drawRect(node.getPathingRect_Inner())      call this.drawRect(node.getPathingRect_Outer())      loop        exitwhen j >= node.getIncidentEdgeCount()        call this.drawPathingOuterRect(node.getEdge(j))        set j = j + 1      endloop      set i = i + 1    endloop  endmethod    // draw the graph  public method draw takes nothing returns nothing    local integer i = 0    local integer j = 0    local PNode node    loop      exitwhen i >= this.graph.getNodeCount()      set node = this.graph.getNode(i)      set j = 0      loop        exitwhen j >= node.getIncidentEdgeCount()        call this.drawEdge(node.getEdge(j))              set j = j + 1      endloop      set i = i + 1    endloop  endmethod    // undraw the graph  public method undraw takes nothing returns nothing    local integer i = 0    loop      exitwhen i >= this.lightning_count      call DestroyLightning(this.lightnings[i])      set this.lightnings[i] = null      set i = i + 1    endloop    set this.lightning_count = 0  endmethodendstruct